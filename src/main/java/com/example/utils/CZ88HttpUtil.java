package com.example.utils;

import com.alibaba.fastjson.JSONObject;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.SocketTimeoutException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
public class CZ88HttpUtil {


    /**
     * Http get请求
     *
     * @param httpUrl 连接
     * @return 响应数据
     */
    public static String doGet(String httpUrl , Map<String, String> headers) {
        long start = System.currentTimeMillis();
        HttpURLConnection connection = null;
        InputStream is = null;
        BufferedReader br = null;
        StringBuilder result = new StringBuilder();
        try {
            //创建连接
            URL url = new URL(httpUrl);
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
            if (null != headers && !headers.isEmpty()) {
                for (Map.Entry<String, String> entry : headers.entrySet()) {
                    connection.setRequestProperty(entry.getKey(), entry.getValue());
                }
            }
            //设置请求方式
            connection.setRequestMethod("GET");
            //设置连接超时时间
            connection.setReadTimeout(3000);
            //开始连接
            connection.connect();
            //获取响应数据
            if (connection.getResponseCode() == 200) {
                //获取返回的数据
                is = connection.getInputStream();
                if (null != is) {
                    br = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));
                    String temp = null;
                    while (null != (temp = br.readLine())) {
                        result.append(temp);
                    }
                }
            }
        }
        catch (SocketTimeoutException e) {
            log.error("SocketTimeoutException:",e);
        } catch (IOException e) {
            log.error("error:",e);
        } finally {
            if (null != br) {
                try {
                    br.close();
                } catch (IOException e) {
                    log.error("error:",e);
                }
            }
            if (null != is) {
                try {
                    is.close();
                } catch (IOException e) {
                    log.error("error:",e);
                }
            }
            if (connection != null) {
                //关闭远程连接
                connection.disconnect();
            }
        }
        long end = System.currentTimeMillis();
//        log.info("HttpUtil.doGet 耗时：{}", end - start);
        return result.toString();
    }

    /**
     * Http post请求
     *
     * @param httpUrl 连接
     * @param param   参数
     */
    public static String doPost(String httpUrl, String param) {
        HttpURLConnection connection = null;
        OutputStream os = null;
        InputStream is = null;
        BufferedReader br = null;
        StringBuilder result = new StringBuilder();
        long start = System.currentTimeMillis();
        try {
            //创建连接对象
            URL url = new URL(httpUrl);
            //创建连接
            connection = (HttpURLConnection) url.openConnection();
            //设置请求方法
            connection.setRequestMethod("POST");
            //设置连接超时时间
            connection.setConnectTimeout(10);
            //设置读取超时时间
            connection.setReadTimeout(3000);
            //DoOutput设置是否向httpUrlConnection输出，DoInput设置是否从httpUrlConnection读入，此外发送post请求必须设置这两个
            //设置是否可读取
            connection.setDoOutput(true);
            connection.setDoInput(true);
            //设置通用的请求属性
            connection.setRequestProperty("accept", "*/*");
            connection.setRequestProperty("connection", "Keep-Alive");
            connection.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)");
            connection.setRequestProperty("Content-Type", "application/json;charset=utf-8");

            //拼装参数
            if (null != param && !param.isEmpty()) {
                //设置参数
                os = connection.getOutputStream();
                //拼装参数
                os.write(param.getBytes(StandardCharsets.UTF_8));
            }
            //读取响应
            if (connection.getResponseCode() == 200) {
                is = connection.getInputStream();
                if (null != is) {
                    br = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));
                    String temp;
                    while (null != (temp = br.readLine())) {
                        result.append(temp);
                        result.append("\r\n");
                    }
                }
            }
            log.info("HttpUtil.doPost 耗时：{}", System.currentTimeMillis() - start);
        }  catch (SocketTimeoutException e) {
            log.info("HttpUtil.doPost 耗时：{}", System.currentTimeMillis() - start);
            log.error("SocketTimeoutException:",e);
        } catch (IOException e) {
            log.error("error:",e);
        } finally {
            log.info("HttpUtil.doPost 耗时：{}", System.currentTimeMillis() - start);
            if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                    log.error("error:",e);
                }
            }
            if (os != null) {
                try {
                    os.close();
                } catch (IOException e) {
                    log.error("error:",e);
                }
            }
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    log.error("error:",e);
                }
            }
            if (connection != null) {
                //关闭连接
                connection.disconnect();
            }
        }

        return result.toString();
    }

    //apispace
    public static void main(String[] args) throws InterruptedException {
        //武汉 01-21
        Map<String, String> headers = new HashMap<>();
        headers.put("X-APISpace-Token", "owl9gy4k77wrerm9ryrkkhrjfqoz77m3");
//        List<String> ips = Arrays.asList("111.183.103.115", "119.103.235.126", "183.95.249.221", "27.19.40.227", "111.181.80.103", "111.181.103.192", "111.181.2.62", "219.140.141.5", "221.232.23.39", "223.104.124.194", "171.43.188.112", "183.94.105.215", "223.104.122.68", "111.183.63.198", "117.152.152.34", "111.181.67.50", "117.136.53.224", "171.82.212.160", "111.181.44.22", "61.242.149.37", "171.82.127.15", "221.234.213.118", "111.181.3.189", "119.103.123.24", "111.175.144.193", "111.183.120.64", "113.57.244.38", "111.183.14.169", "183.94.70.144", "221.234.227.115", "117.152.76.211", "111.181.93.35", "117.151.21.4", "111.181.54.118", "58.19.60.220", "111.183.110.213", "223.104.122.107", "223.104.122.116", "171.82.113.96", "111.181.24.238", "27.19.184.141", "117.136.53.202", "27.19.32.61", "111.181.143.43", "111.181.49.70", "183.95.249.164", "111.183.70.175", "171.113.99.130", "27.19.47.172", "223.104.119.96", "111.183.20.167", "119.98.132.188", "119.103.3.20", "111.181.50.173", "171.82.111.177", "111.181.33.6", "171.82.2.203", "111.183.112.23", "119.103.22.117", "111.181.84.6", "117.151.11.163", "223.104.124.6", "223.104.122.0", "111.183.122.52", "111.181.82.53", "111.183.106.246", "117.152.147.93", "111.181.34.107", "111.183.35.34", "223.104.119.71", "111.181.102.166", "221.235.61.73", "117.151.12.208", "27.19.230.252", "59.174.147.51", "61.242.134.216", "113.57.24.114", "119.103.107.112", "223.104.122.57", "111.60.132.186", "111.181.25.158", "111.181.4.22", "119.103.126.164", "119.103.234.195", "223.76.228.236", "111.48.77.214", "171.82.160.172", "111.181.67.7", "111.183.43.56", "111.181.51.40", "111.172.118.124", "111.60.11.155", "221.232.112.255", "119.103.108.199", "117.154.5.75", "111.48.159.134", "221.232.183.77", "27.19.47.195", "111.183.13.51", "111.60.135.148", "223.104.122.106", "58.48.90.184", "183.95.249.231", "111.181.106.44", "223.104.122.34", "117.154.95.91", "111.181.69.1", "183.95.251.18", "111.181.11.185", "117.154.54.116", "111.183.12.171", "183.95.249.72", "59.172.113.50", "111.183.122.231", "117.154.7.80", "61.242.134.8", "119.98.7.229", "223.104.119.119", "111.181.9.214", "111.183.82.29", "111.183.49.249", "111.181.122.14", "27.18.100.86", "111.181.91.2", "111.181.81.37", "117.151.12.76", "58.48.200.241", "117.154.101.107", "111.183.107.183", "211.91.139.84", "111.181.0.10", "171.82.107.25", "111.183.58.55", "111.181.29.23", "111.4.146.188", "61.242.134.217", "223.104.119.93", "111.181.89.1", "117.154.100.255", "223.104.122.110", "111.181.146.146", "111.60.17.239", "221.234.229.186", "113.57.24.105", "111.181.70.9", "121.60.119.199", "117.154.59.153", "111.183.109.247", "111.183.83.33", "111.183.52.24", "223.104.119.89", "111.181.9.248", "111.183.1.145", "111.181.142.140", "111.183.141.32", "117.136.53.229", "111.181.33.129", "223.104.122.36", "111.183.130.165", "111.181.109.223", "223.104.122.13", "111.183.34.117", "111.181.109.198", "111.181.84.14", "117.151.56.119", "220.113.79.84", "117.152.197.227", "111.183.6.94", "117.154.88.77", "183.95.72.129", "119.98.168.203", "221.232.27.24", "221.232.14.8", "117.152.157.50", "119.103.117.203", "117.152.207.55", "111.181.126.109", "221.232.121.38", "117.136.53.163", "111.183.108.100", "171.82.160.40", "111.181.47.174", "111.60.135.125", "111.60.28.121", "111.181.125.55", "111.181.141.30", "171.82.133.161", "119.98.184.80", "111.181.3.111", "223.76.127.63", "111.183.12.172", "119.98.82.87", "111.60.6.168", "221.232.114.70", "111.181.81.225", "111.183.1.41", "111.181.143.42", "111.183.85.185", "111.181.74.6", "111.181.122.246", "113.57.250.210", "183.95.251.214", "111.183.110.135", "183.95.249.175", "111.183.21.69", "58.19.11.19", "121.60.44.179", "111.60.108.144", "119.103.160.54", "119.103.124.146", "218.106.117.246", "27.16.152.35", "61.242.134.67", "183.95.249.9", "59.172.97.136", "111.183.103.7", "121.60.109.184", "223.104.119.119", "111.183.71.134", "111.181.54.165", "27.18.151.111", "111.181.129.87", "111.183.110.71", "171.43.221.188", "59.175.87.33", "183.95.251.204", "171.82.113.8", "111.181.67.84", "58.19.60.33", "119.103.107.11", "113.57.245.55", "117.136.53.238", "117.151.11.187", "111.181.121.96", "111.181.103.105", "61.242.134.142", "223.104.119.75", "223.104.119.120", "223.104.119.121", "111.181.23.85", "219.140.131.124", "111.60.31.17", "111.183.28.133", "223.104.122.127", "111.183.63.94", "111.183.35.78", "183.95.249.223", "111.183.10.188", "171.82.126.215", "183.95.251.199", "223.104.122.106", "111.60.118.100", "111.183.109.144", "59.174.50.57", "111.181.51.212", "117.136.53.241", "117.136.53.226", "111.183.106.117", "111.181.23.43", "171.82.2.54", "117.152.75.225", "183.95.212.159", "119.103.160.102", "117.154.84.196", "61.242.148.247", "111.181.84.111", "61.242.134.99", "171.82.214.131", "59.175.21.8", "61.242.134.162", "111.183.70.190", "171.82.213.166", "61.183.178.158", "117.151.110.230", "111.181.73.176", "119.103.110.201", "111.183.84.53", "117.151.84.198", "183.95.249.220", "111.181.102.195", "111.183.69.158", "59.174.144.31", "171.82.114.125", "61.242.134.59", "183.95.251.21", "171.43.207.40", "111.183.9.124", "183.95.32.140", "111.60.8.24", "111.183.12.74", "119.98.96.103", "223.104.124.177", "111.60.133.161", "111.181.30.199", "218.104.102.182", "119.103.3.29", "111.183.109.107", "58.48.14.106", "111.183.46.5", "223.104.122.27", "111.181.20.99", "111.48.159.237", "171.43.191.132", "121.60.110.110", "111.183.25.172", "111.181.83.41", "111.60.132.152", "111.60.28.151", "171.82.107.233", "117.154.74.185", "111.181.9.150", "223.104.124.3", "117.151.100.207", "119.103.107.121", "111.183.7.30", "119.103.112.243", "111.183.44.132", "117.154.43.217", "111.183.22.238", "171.82.120.192", "223.104.119.92", "221.234.236.64", "171.82.114.231", "183.95.251.127", "111.181.70.82", "111.183.106.114", "111.183.32.143", "171.82.188.239", "111.181.70.235", "111.181.84.109", "111.181.85.110", "117.154.7.96", "111.181.21.26", "111.183.11.235", "117.154.30.158", "113.57.53.182", "111.60.18.106", "111.183.12.3", "61.242.134.238", "27.18.73.195", "111.181.129.128", "27.18.151.73", "111.181.144.105", "119.103.105.240", "27.18.41.190", "117.152.69.55", "27.19.191.160", "111.183.143.115", "27.18.100.164", "119.103.151.14", "211.161.145.150", "27.19.105.144", "223.104.119.82", "119.103.209.213", "211.91.138.169", "111.181.80.26", "117.154.41.35", "171.82.1.218", "119.103.102.236", "183.95.251.142", "111.183.93.137", "113.57.105.187", "59.174.57.180", "111.183.60.95", "111.183.51.77", "111.181.120.134", "61.242.134.216", "27.19.190.250", "111.181.146.60", "223.104.124.189", "111.183.145.194", "119.103.123.209", "58.19.94.254", "61.242.134.40", "111.183.142.96", "111.181.113.221", "58.19.60.193", "111.183.124.102", "111.181.103.238", "61.242.134.18", "111.60.135.169", "119.98.246.222", "27.16.201.30", "219.140.106.24", "111.181.43.61", "111.60.24.48", "111.181.84.83", "111.181.44.215", "223.104.119.85", "219.140.217.16", "117.154.91.207", "111.181.97.128", "111.183.59.131", "111.183.57.108", "111.60.134.244", "119.98.118.170", "183.95.251.214", "223.104.122.117", "111.60.25.140", "117.151.44.161", "183.95.251.82", "117.136.53.69", "117.151.25.177", "183.95.250.73", "117.152.200.117", "111.181.7.211", "111.181.103.72", "111.183.0.234", "120.202.184.89", "111.183.70.4", "117.154.98.105", "171.82.127.39", "183.95.249.77", "117.154.54.157", "119.103.123.100", "111.183.125.74", "171.82.160.188", "111.183.7.174", "111.181.80.26", "221.234.131.167", "111.60.22.76", "111.183.10.7", "111.181.144.31", "111.183.104.177", "119.103.108.109", "111.181.92.119", "111.60.21.73", "111.60.0.115", "111.183.82.91", "27.17.83.249", "111.181.104.91", "223.104.124.190", "111.60.135.57", "27.19.133.138", "111.181.80.131", "183.95.251.20", "111.181.33.50", "111.181.90.189", "111.183.74.124", "111.60.133.155", "119.103.190.233", "111.181.143.28", "117.154.99.227", "111.183.81.49", "113.57.95.235", "111.183.121.161", "111.183.127.181", "111.181.141.33", "111.181.34.69", "171.113.64.35", "111.183.125.175", "117.151.108.208", "111.181.52.43", "171.113.87.223", "111.181.7.156", "111.60.97.145", "183.95.251.0", "59.175.99.57", "111.60.25.217", "113.57.250.210", "111.60.24.145", "58.48.155.118", "111.181.30.108", "111.181.33.159", "171.82.20.187", "171.82.3.197", "58.19.60.194", "113.57.245.144", "59.172.99.251", "111.183.106.215", "111.183.29.199", "223.104.122.24", "59.172.96.190", "223.104.124.219", "183.95.249.193", "111.183.28.35", "111.181.42.234", "117.151.20.59", "111.183.8.188", "111.183.6.13", "61.242.134.155", "27.19.177.1", "111.60.87.35", "111.172.132.105");
        List<String> ips = Arrays.asList("2409:8a4c:1225:5950:7a46:5fff:fe75:aea0", "240e:45c:e30:263c:df56:316d:c90f:7b6", "2409:894d:10a4:1bb9:181c:526b:696b:9620", "2409:8a4c:e3:48b2:94fb:2310:2e26:b109", "240e:36d:1517:bd10:ef1e:319f:69b8:72e0", "240e:36f:9a3:d330:cdc6:8003:af7c:4ee6", "2409:8a4d:c33:97e0:c191:b692:f9d8:b17b", "240e:369:1746:8f00:211d:d3d2:afc:177f", "2408:844f:1966:ae15:c8ae:4eff:fe1a:d34f", "240e:36f:451:63b1:49d4:fea8:21c:e6ab", "2409:8a4c:e41:df00:854f:d1ff:988b:6d92", "240e:36f:155e:1210:c28a:11ed:dc81:22eb", "240e:45e:220:a0f:5c7f:c9ff:fe7e:af2b", "2409:894d:515:5bc:980c:4eff:fe8e:d4f6", "240e:45c:210:7f3:c21:66ff:febc:2df1", "2409:894d:cbd:6c09:3925:7f8c:49ce:8a63", "2408:844f:151:9d4e:b482:afff:fe49:373", "240e:45c:250:2500:181c:86eb:9f4d:5a84", "2409:894d:c44:2f88:181c:879a:a98b:dbe9", "2409:8a4c:16e9:65b0:1571:c091:3a6c:a11f", "2408:844f:170:3f35::1", "240e:36d:15d1:d200:e4ba:212e:1e27:7e4f", "2409:894d:14a5:3b0c:181b:6fe5:616:96e7", "2408:844f:d31:6a56::1", "240e:45f:101:689a:b198:b3be:69b3:7cfd", "2409:894d:d2e:9bf:181c:949d:5751:d282", "2409:8a4c:1043:a8e4:9535:dff5:b9c0:a1a8", "240e:45d:450:3448:181c:664a:bfc4:18e1", "2409:894d:2da:2ef:181c:87c4:835c:4b22", "240e:45e:1641:767b:85b7:2d25:390f:1043", "2408:844f:1536:6e5a:4c55:f7ff:fe36:6778", "2409:8a4c:1011:a70:9d89:a004:29bc:30fc", "2409:8a4c:1829:c6a4:2c66:be1:4d95:be4e", "2409:894d:192a:3b0:a469:98ff:fe8a:bd36", "240e:369:15f9:1c10:903c:7119:fd10:162b", "240e:45d:630:118:8063:daff:fe3e:ce32", "2409:894d:16bc:e603:bca6:43ff:feba:6e23", "240e:45c:1610:a98b:f47c:7ff:fee1:4e0a", "2408:844f:1771:ff58:3474:cd2e:292:3dd2", "240e:36f:9a0:1831:a512:11f2:eb54:ffce", "2408:844f:1116:bf06:51ba:b1fb:214a:358a", "240e:45c:250:3390:1da2:6e0c:d7bc:78c7", "2409:894d:c48:e567:6756:e1c2:fde7:25de", "2409:894d:ee1:118:5cb3:4dff:feb8:5bb1", "240e:36c:12e:7400:9c79:387f:a336:9474", "2409:894d:1927:129:181c:8a0f:a18f:aaf4", "2409:894d:8d1:4e2:181c:8dc0:762:58a2", "2409:894d:1713:322:181c:98f7:507d:360a", "240e:45d:811:d424:9c30:a9ff:fecf:169e", "240e:45d:1240:1c60:9795:fca5:d242:64ed", "2409:894d:4cc:4b6c:181c:8d63:5d30:5b56", "2409:894d:d0d:fd1:3c43:a7ff:fe30:35ea", "2409:894d:18c4:32a:626b:75:6ac4:c265", "2409:894d:16b5:5881:181c:4f48:14b2:5e1e", "2408:844f:1330:340f::1", "240e:45e:100:b329:9cb7:bb11:444:9be3", "2409:894d:721:33c:5c9:f832:b9f2:d794", "2409:894d:6b4:1982:b5:23a6:19e9:5847", "2409:894d:12b:670:181c:9097:5cdb:8d6b", "2409:8a4c:28:5b20:7d2a:7652:7cb2:172d", "2408:844f:d61:592b:8871:e882:46e7:bf95", "2409:894d:86a:2415:181c:8343:7a70:9122", "2408:844e:dc0:22ed:eed1:b491:e26c:1bf5", "2408:824e:153c:7a11:c649:546d:ca93:25e0", "2409:894d:efb:728:8451:7dff:fe1f:fa56", "2408:844f:901:28af:b42a:4cec:9ca2:16c1", "2409:8a4c:634:12e0:1990:1a9c:f000:6da5", "2409:894d:165c:b705:895f:3f58:5363:184c", "2409:8a4c:143b:d7b1:3d38:efb9:986a:9f40", "2409:894d:1e0:469:181c:683a:91d7:fa59", "2409:894d:8d4:196c:bd3a:1ca2:f73c:ba73", "240e:45d:10:778d:e83b:33b8:403a:c1da", "2408:844f:1551:1017::1", "2409:894d:aa7:2f11:bcd0:71ff:fef9:278f", "240e:45e:111:6fb9:1d2b:a760:b297:2fdb", "2409:894d:e8e:175b:bca5:64ff:fe6d:d8c0", "2409:894d:1513:159:8517:ac58:1347:108", "2408:844f:710:7c2e:2c52:a06c:b473:cea7", "240e:36f:9c8:c300:f19f:148b:2451:345", "2409:894d:8a6:2ef3:ec5b:dae8:5aa6:310a", "2409:894d:d26:832:ce5:60ff:fec2:af7e", "240e:45c:1830:3fa8:181c:7d27:927d:b1cd", "240e:45e:100:2e06:c41f:8ade:270c:b9a8", "240e:369:1788:ac02:5d1f:8f38:1588:ef71", "2408:844f:341:c48a:8081:ac93:de86:4a1d", "2408:844f:341:c48a:8081:ac93:de86:4a1d", "240e:45c:1610:32df:181c:4bcb:f942:e301", "2409:894d:62e:3300:181b:a440:dcfa:ff24", "2409:8a4c:827:4360:b513:6647:8b98:e357", "2408:844f:1540:558c:1142:61c4:55e0:8c69", "2409:894d:122c:1c06:181c:822b:fbd6:bb82", "2408:844f:711:16a9:e877:736c:267a:ba75", "2409:894d:710:2cc:6405:1ff:fedd:fdb2", "2409:894d:1682:387a:600c:aaff:fe93:3512", "2409:894d:818:30e7:181c:974a:5e46:bbbc", "2409:894d:200:22b9:70af:a2a2:c229:232c", "240e:45d:1650:23b:181c:85ef:cb96:8b4b", "240e:45c:c20:70b:5ac:1546:9fad:8f3a", "2409:894d:d12:102e:78bf:b8ff:fe0d:f2fa", "240e:36f:9a6:2330:f971:a149:7fcc:460a", "240e:45d:c21:fb4a:7955:222f:8380:ba8", "2409:894d:4e2:d2db:2854:6ed2:7d79:87f8", "2409:894d:1296:1b9e:f073:51ff:fe11:6aae", "2409:894d:16f7:c2:9869:82ff:fe09:9ba4", "2408:844f:1561:3a92:dc03:b6ff:fe5d:e845", "240e:45f:1860:a6e:9eeb:fd72:8379:483c", "2409:894d:31c:4e9:181c:91ee:493f:4f0", "240e:45e:0:b91a:b8b4:34ff:fec8:6b85", "2409:894d:11c:669:b096:ecff:fe14:e36b", "240e:45f:60:321:d895:44d1:e3c5:def0", "240e:45f:110:7dd0:95e4:92b9:69f7:bb2d", "240e:45c:1610:dca:5c39:eeff:fe4b:5bc3", "2409:894d:d0c:1446:cbf6:5615:c4f2:d432", "2409:894d:6db:7f7:6045:991e:3eb9:3aa2", "240e:45f:100:2f1:f0fe:3cce:7701:406b", "2409:8a4c:a4a:6dd0:7a46:5fff:fe73:eee0", "2409:894d:a80:1e7b:7ccc:e735:aabd:c84c", "2408:844f:1311:d8e4:484a:51ff:fe22:7a9f", "2409:894d:70b:6cd:181c:8fc3:3cfd:48e6", "2409:894d:146e:8e06:2c75:baff:fe66:2b06", "240e:45d:1600:70f:181c:8d70:3cac:1dbf", "2409:894d:16e9:cc:c467:15ff:fedd:a063", "2409:894d:ee6:43:181c:940:49cc:12ec", "240e:45c:c40:67f:181c:92c7:b79:7b3", "240e:36f:413:4c70:c93b:9772:8559:6bc3", "2409:8a4c:163d:9d30:c8f1:897f:1aa7:2d64", "240e:36f:9a6:75e0:ad1f:49e8:9141:9a57", "2408:844f:d50:73a9:7c6f:58f6:aa04:74de", "2409:894d:6b8:29a3:10a8:4aff:fef9:b375", "2409:894d:a74:cacf:181c:8c09:5e94:3c1a", "2408:844f:546:8dff::1", "2409:8a4c:a11:7750:bc44:c634:6aca:5b3e", "2408:844f:331:a043::1", "2409:894d:16eb:3347:181c:9cb2:783d:f3e4", "2408:844f:1740:9d21:9417:d7b5:282e:9409", "2408:844f:920:f6cf::1", "2409:8a4c:221:20c0:7989:ddc3:e97b:13f6", "2409:8a4c:1831:34e0:658a:6646:55b1:7663", "240e:45e:100:9217:41a6:6eda:fa70:6560", "240e:36f:402:6741:14a0:3408:d734:71ac", "2409:894d:6dd:70b:6ca8:9965:f454:1611", "2409:8a4c:1724:60d0:612c:cf2d:91ee:115", "2409:8a4c:8d0:11c0:34df:f9ae:5d9:a1ef", "240e:36c:d4f:2200:d580:36ca:c7d3:471d", "240e:45d:c70:4240:181c:a134:aaa7:a818", "240e:369:12df:5000:d9c7:b995:3122:d2ef", "240e:45c:e60:2d2f:4401:f8ff:fe63:6b0e", "240e:45c:50:12f3:1996:a6b4:bd54:5671", "2409:894d:14e8:4f4:a2f3:b6ea:1363:f639", "2409:8a4c:2b6:2b10:71e8:9a62:afb9:8479", "240e:45d:430:63d:e2a9:6944:a70c:b6ce", "2409:894d:b20:6dd:181b:c5d3:71eb:63a4", "2408:844f:b16:73b9:f6b6:33b0:14fc:3850", "240e:45c:230:2f0:181c:9222:ea91:fc9b", "2409:8a4c:16d1:1914:70c4:3de5:aee9:142f", "2408:844f:1540:f445:b0c5:3ff:fedd:3f03", "2409:894d:1658:ab75:10ac:8170:94a8:7f71", "2409:894d:ebd:1141:181c:3ab8:e822:caf8", "2409:894d:1458:84b9:298a:587c:8d19:2e52", "240e:45f:c11:acf4:11e0:8ea9:55e6:d1a7", "240e:45f:110:38d6:bc6a:b112:7852:7de4", "2409:894d:30a:7cb:a411:68ff:fee3:2bfc", "240e:36a:466:8000:5863:2b1b:16e6:4906", "2409:894d:1490:2bc:1818:dea2:8af3:c0dc", "240e:45d:650:220f:cc4f:4ff:fea2:419c", "240e:36d:14bd:f315:985f:b156:c287:4695", "2408:844f:1713:b382:709f:96ff:fe5e:b4c6", "2409:894d:106e:b40a:828:eeff:fe94:62a4", "2408:844f:1502:e560::1", "2409:8a4c:299:4fa0:eab3:efff:fe7c:8e00", "2409:8a4c:187d:6e0:1d36:d910:bcc1:6ad9", "2409:894d:eba:3296:181c:99e5:a3b9:1c0", "2409:894d:16a6:6386:181c:8863:79aa:9ecc", "2409:894d:cde:155f:e9b5:f927:4dd2:8a86", "2408:844f:d40:d912:b1b8:788e:193b:a21c", "2409:894d:169d:2735:bf8:76ed:44fc:3a81", "240e:36d:15ac:6700:26ca:4575:193c:f264", "2409:894d:f33:2de:181c:36a5:c6e3:2687", "240e:45c:1220:1d74:181c:8f42:9d27:e75c", "2409:894d:14f2:113b:5c40:9dff:fe64:f7eb", "240e:45c:c50:30ae:181c:5871:71fa:2e32", "240e:45d:1600:4736:70cc:bbff:fea8:fcb8", "240e:45c:1430:9110:181c:816a:cf87:47ea", "2408:844f:d06:3745:b118:d598:5bba:5f50", "240e:45d:c70:3606:8c95:22be:2274:6db4", "2408:844f:512:7ab4:28c9:2dff:fe45:f434", "2409:894d:170a:4e:8066:f6ff:fe97:a20b", "240e:369:17e2:ab00:6a77:daff:fe27:8dca", "2409:894d:1124:e86:4084:4ff:fe74:c1d9", "240e:45f:1800:681e:c497:19ff:fe1a:d7c", "240e:45c:a60:1673:2cbe:37ff:fe40:9711", "240e:45d:850:4b14:181c:6a61:f579:b08b", "2409:894d:1080:1eb2:1075:6eff:fe30:7a20", "2409:894d:881:1f14:99d7:2681:23dc:3e53", "240e:45d:a70:11bd:90fe:5dff:fe32:cd81", "240e:45f:110:bcb6:d14a:4f49:1251:51c7", "240e:36b:17d1:2300:3985:f466:5f6:45f6", "2409:894d:531:202:181c:868d:9077:bdf6", "240e:36d:15c:ac10:68f2:8dcb:7e0a:58b7", "2408:844f:101:4dd2:ad0a:b4a0:c226:a490");
        for (String ip : ips) {
            Thread.sleep(300);
            String result = doGet("https://eolink.o.apispace.com/ipguishu/ip/geo/v1/district?ip=" + ip, headers);
            System.out.println((result));
        }

    }

//cz88
    /*public static void main(String[] args) throws InterruptedException {
        //武汉 01-21
        List<String> ips = Arrays.asList("2409:894d:2da:2ef:181c:87c4:835c:4b22", "223.104.122.0", "61.242.134.150", "59.175.97.169", "117.152.196.249", "2408:844f:1771:ff58:3474:cd2e:292:3dd2", "223.104.119.93", "240e:36f:9a0:1831:a512:11f2:eb54:ffce", "111.181.89.1", "223.104.122.62", "171.82.105.188", "111.183.105.227", "27.19.184.225", "111.183.92.120", "111.181.124.48", "59.174.82.50");
        for (String ip : ips) {
            Thread.sleep(300);
            String result = doGet("https://update.cz88.net/api/cz88/ip/base_login?ip=" + ip, null);
            Result result1 = JSONObject.parseObject(result, Result.class);

            System.out.println((result1));

//            System.out.println(result);

        }

    }*/
    //{
    //    "code": 200,
    //    "success": true,
    //    "message": "操作成功",
    //    "data": {
    //        "ip": "61.242.134.150",
    //        "countryCode": "CN",
    //        "country": "中国",
    //        "province": "湖北",
    //        "city": "未知",
    //        "districts": "未知",
    //        "isp": "中国联通",
    //        "geocode": "156042000000",
    //        "netWorkType": "移动数据",
    //        "mbRate": "暂未发现",
    //        "score": "70",
    //        "honeypot": "未知",
    //        "netAddress": "登录查看",
    //        "asn": "CHINA169-BACKBONE CHINA UNICOM China169 Backbone",
    //        "iana": "中国",
    //        "actionAddress": [
    //            "中国-湖北--"
    //        ],
    //        "company": "CHINA169-BACKBONE CHINA UNICOM China169 Backbone",
    //        "locations": [
    //            {
    //                "latitude": "30.455608",
    //                "longitude": "113.898757",
    //                "radius": 176406.0
    //            }
    //        ],
    //        "openPorts": [],
    //        "domains": null,
    //        "breadRateMap": null,
    //        "deviceRateMap": null,
    //        "provinceCode": "420000",
    //        "cityCode": "未知",
    //        "districtCode": "未知",
    //        "continent": "AS",
    //        "vpn": false,
    //        "tor": false,
    //        "proxy": false,
    //        "spider": false,
    //        "roaming": false
    //    },
    //    "time": "2025-01-22 17:09:43"
    //}
    @Data
    private static class Result {
        private String ip;
        private Integer code;
        private DataRes data;
        @Override
        public String toString() {
            return "{ip:" + StringUtils.rightPad(data.ip, 40) + ",data:" + data + "}";
        }

    }
    @Data
    private static class DataRes {
        private String ip;
        private String country;
        private String province;
        private String city;
        private String districts;
        @Override
        public String toString() {
            return "{country:" + country + ",prov:" + province + ",city:" + city + ",district:" + districts + "}";
        }

    }
}
